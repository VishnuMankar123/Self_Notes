рдЕрдЪреНрдЫрд╛ рд╕рд╡рд╛рд▓ рд╣реИ ЁЯСН рдЪрд▓реЛ simple рддрд░реАрдХреЗ рд╕реЗ рд╕рдордЭрддреЗ рд╣реИрдВ рдХрд┐ **Firebase** рдХреНрдпрд╛ рд╣реИред

---

## ЁЯФе Firebase рдХреНрдпрд╛ рд╣реИ?

**Firebase** Google рдХреА рдПрдХ **Backend-as-a-Service (BaaS)** platform рд╣реИред
рдорддрд▓рдм рдпреЗ developers рдХреЛ рдРрд╕реА ready-made services рджреЗрддрд╛ рд╣реИ рдЬрд┐рд╕рд╕реЗ рдЖрдкрдХреЛ рдЦреБрдж backend code (рдЬреИрд╕реЗ authentication, notifications, realtime database, hosting рдЖрджрд┐) рд▓рд┐рдЦрдиреЗ рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ рдкрдбрд╝рддреАред

---

## ЁЯУМ Firebase рдХреА Main Services

1. **Authentication (Login/Signup)**

   * Google, Facebook, Email/Password, Phone Number рдЖрджрд┐ рд╕реЗ user login рдХрд░рдирд╛ рдмрд╣реБрдд рдЖрд╕рд╛рдиред

2. **Realtime Database & Firestore**

   * Firebase рдХрд╛ database automatically **realtime sync** рдХрд░рддрд╛ рд╣реИред
   * рдЬреИрд╕реЗ рд╣реА рдПрдХ user data update рдХрд░реЗрдЧрд╛, рдмрд╛рдХреА users рдХреЗ рдкрд╛рд╕ рддреБрд░рдВрдд updated data рджрд┐рдЦ рдЬрд╛рдПрдЧрд╛ред

3. **Firebase Cloud Messaging (FCM)**

   * Free service рд╣реИ рдЬрд┐рд╕рд╕реЗ рдЖрдк **push notifications** рднреЗрдЬ рд╕рдХрддреЗ рд╣реЛ Android, iOS рдФрд░ Web apps рдкрд░ред

4. **Firebase Hosting**

   * Static websites (React, Angular, Vue рдЖрджрд┐) рдХреЛ free hosting рджреЗрддрд╛ рд╣реИред

5. **Firebase Storage**

   * Images, videos, рдФрд░ files рдХреЛ cloud рдореЗрдВ store рдФрд░ serve рдХрд░рдиреЗ рдХреА рд╕реБрд╡рд┐рдзрд╛ред

6. **Crashlytics & Analytics**

   * рдЖрдкрдХреА app рдореЗрдВ errors/crashes track рдХрд░рддрд╛ рд╣реИ рдФрд░ detailed reports рджреЗрддрд╛ рд╣реИред
   * Analytics рд╕реЗ user behavior рдкрддрд╛ рдЪрд▓рддрд╛ рд╣реИ (рдХрд┐рддрдиреЗ рд▓реЛрдЧ app use рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рдХреМрдирд╕реЗ feature рдЬреНрдпрд╛рджрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣реЛ рд░рд╣реЗ рд╣реИрдВ)ред

---

## тЪб рдлрд╛рдпрджрд╛ рдХреНрдпреЛрдВ рд╣реИ Firebase рдХрд╛?

* Ready-made SDK рдорд┐рд▓рддрд╛ рд╣реИ (Android, iOS, Web, Backend рд╕рдмрдХреЗ рд▓рд┐рдП)ред
* рдЖрдкрдХреЛ **server setup рдХрд░рдиреЗ рдХреА рдЬрд░реВрд░рдд рдирд╣реАрдВ**ред
* Free tier рдореЗрдВ рдХрд╛рдлреА рдХреБрдЫ рдорд┐рд▓рддрд╛ рд╣реИред
* Google рдХрд╛ platform рд╣реЛрдиреЗ рд╕реЗ рдХрд╛рдлреА scalable рдФрд░ secure рд╣реИред

---

ЁЯСЙ Short рдореЗрдВ:
Firebase рдПрдХ **all-in-one backend solution** рд╣реИ, рдЬрд┐рд╕рд╕реЗ developers fast apps рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВ тАФ рдмрд┐рдирд╛ рдЬреНрдпрд╛рджрд╛ server side coding рдФрд░ infrastructure manage рдХрд┐рдПред

---

рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЛрдЧреЗ рдХрд┐ рдореИрдВ specifically **Firebase Cloud Messaging (FCM)** рд╕рдордЭрд╛рдКрдБ? рдХреНрдпреЛрдВрдХрд┐ рд╡рд╣реА part рдЖрдк рдЕрднреА Spring Boot рдХреЗ рд╕рд╛рде use рдХрд░ рд░рд╣реЗ рд╣реЛред
================================================================================================================================
рдареАрдХ рд╣реИ Vishnudas ЁЯСМ
рдореИрдВ рдЗрд╕ рдХреЛрдб рдХреЛ step by step рд╕рдордЭрд╛рддрд╛ рд╣реВрдБ рдХрд┐ рдпреЗ рдХреНрдпрд╛ рдХрд░ рд░рд╣рд╛ рд╣реИ рдФрд░ рдХреНрдпреЛрдВ рд▓рд┐рдЦрд╛ рдЧрдпрд╛ рд╣реИред

---

## ЁЯУМ Purpose of this class

`FCMInitializer` рдПрдХ **Spring Boot service class** рд╣реИ рдЬреЛ рдЖрдкрдХреА application start рд╣реЛрддреЗ рд╣реА **Firebase Cloud Messaging (FCM)** рдХреЛ initialize рдХрд░рддреА рд╣реИред
рдпрд╛рдирд┐ рдЬрдм рдЖрдкрдХреА Spring Boot application рдЪрд▓реЗрдЧреА, рддрдм Firebase рдХрд╛ connection рдкрд╣рд▓реЗ рд╕реЗ ready рд╣реЛ рдЬрд╛рдПрдЧрд╛ рдФрд░ рдЖрдк рдХрд╣реАрдВ рд╕реЗ рднреА notifications рднреЗрдЬ рд╕рдХрддреЗ рд╣реЛред

---

## ЁЯФН Breakdown of Code

### 1.

```java
@Service
public class FCMInitializer {
```

* рдпрд╣ Spring рдХрд╛ `@Service` annotation рд╣реИред
* рдорддрд▓рдм рдпрд╣ class рдПрдХ **Spring-managed bean** рд╣реЛрдЧреА рдФрд░ automatically application context рдореЗрдВ register рд╣реЛ рдЬрд╛рдПрдЧреАред

---

### 2.

```java
@Value("${app.firebase-configuration-file}")
private String firebaseConfigPath;
```

* рдпрд╣ Spring рдХрд╛ **dependency injection** feature рд╣реИред
* `application.properties` (рдпрд╛ `application.yml`) рдореЗрдВ рдЖрдкрдиреЗ property define рдХреА рд╣реЛрдЧреА:

  ```properties
  app.firebase-configuration-file=firebase-service-account.json
  ```
* рдпрд╣ line property value рдХреЛ variable `firebaseConfigPath` рдореЗрдВ рдбрд╛рд▓ рджреЗрдЧреАред
  рдпрд╛рдирд┐ рдЖрдкрдХреЛ service account json file рдХрд╛ рдирд╛рдо рдпрд╣рд╛рдБ рд╕реЗ рдорд┐рд▓реЗрдЧрд╛ред

---

### 3.

```java
@PostConstruct
public void initialize() {
```

* `@PostConstruct` annotation рдорддрд▓рдм рдпрд╣ method **Spring context load рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж automatically execute** рд╣реЛрдЧрд╛ред
* рдпрд╛рдирд┐ рдЬреИрд╕реЗ рд╣реА рдЖрдкрдХреА app start рд╣реЛрдЧреА, рдпрд╣ method call рд╣реЛрдЧрд╛ рдФрд░ Firebase initialize рдХрд░ рджреЗрдЧрд╛ред

---

### 4.

```java
FirebaseOptions options = FirebaseOptions.builder()
        .setCredentials(GoogleCredentials.fromStream(
                new ClassPathResource(firebaseConfigPath).getInputStream()))
        .build();
```

* рдпрд╣рд╛рдБ рдкрд░ **FirebaseOptions** object create рд╣реЛ рд░рд╣рд╛ рд╣реИред
* `GoogleCredentials.fromStream(...)` service account json file рд╕реЗ credentials load рдХрд░рддрд╛ рд╣реИред
* `new ClassPathResource(firebaseConfigPath).getInputStream()` classpath рд╕реЗ json file рдХреЛ load рдХрд░рддрд╛ рд╣реИ (рдпрд╛рдирд┐ рдЖрдкрдХреА resources folder рдореЗрдВ рд░рдЦреА рд╣реБрдИ file)ред
* рдлрд┐рд░ `build()` рдХрд░рдХреЗ рдПрдХ proper options object рдорд┐рд▓ рдЬрд╛рддрд╛ рд╣реИ, рдЬрд┐рд╕рд╕реЗ Firebase рд╕реЗ connect рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВред

---

### 5.

```java
if (FirebaseApp.getApps().isEmpty()) {
    FirebaseApp.initializeApp(options);
    System.out.println("Firebase application has been initialized");
}
```

* рдпрд╣ check рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдХрд╣реАрдВ Firebase рдкрд╣рд▓реЗ рд╕реЗ initialize рддреЛ рдирд╣реАрдВ рд╣реИред
* рдЕрдЧрд░ **рдкрд╣рд▓реА рдмрд╛рд░** initialize рдХрд░ рд░рд╣реЗ рд╣реЛ тЖТ рддреЛ `FirebaseApp.initializeApp(options)` call рдХрд░рдХреЗ Firebase ready рдХрд░ рджреЗрддрд╛ рд╣реИред
* рдПрдХ рдмрд╛рд░ initialize рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж рдкреВрд░реА application рдореЗрдВ рдЙрд╕реА рдХрд╛ use рд╣реЛрдЧрд╛ред

---

### 6.

```java
} catch (IOException e) {
    System.err.println("Error initializing Firebase: " + e.getMessage());
}
```

* рдЕрдЧрд░ json file missing рд╣реИ, path рдЧрд▓рдд рд╣реИ, рдпрд╛ рдХреЛрдИ I/O error рдЖрдпрд╛ рддреЛ рдпрд╣ block execute рд╣реЛрдЧрд╛ рдФрд░ error log рдХрд░ рджреЗрдЧрд╛ред

---

## тЬЕ Final Summary

* рдпрд╣ class рдЖрдкрдХреА application start рд╣реЛрддреЗ рд╣реА **Firebase SDK initialize** рдХрд░ рджреЗрддреА рд╣реИред
* Initialization рдореЗрдВ service account json file рд╕реЗ credentials рдЙрдард╛рдП рдЬрд╛рддреЗ рд╣реИрдВред
* Firebase рдХреЗрд╡рд▓ рдПрдХ рдмрд╛рд░ initialize рд╣реЛрддрд╛ рд╣реИред
* рдЗрд╕рдХреЗ рдмрд╛рдж рдЖрдк рдХрд╣реАрдВ рднреА notification рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП `FirebaseMessaging` API рдХрд╛ use рдХрд░ рд╕рдХрддреЗ рд╣реЛред

---

рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЛрдЧреЗ рдХрд┐ рдореИрдВ рдЗрд╕рдХрд╛ рдЕрдЧрд▓рд╛ step рднреА рд╕рдордЭрд╛рдКрдБ тАФ рдпрд╛рдирд┐ **FirebaseMessaging рдХрд╛ use рдХрд░рдХреЗ Spring Boot рд╕реЗ notification рдХреИрд╕реЗ рднреЗрдЬрддреЗ рд╣реИрдВ**?
================================================================================================================================
рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ рд╕рд╡рд╛рд▓ Vishnudas ЁЯСМ рдЪрд▓реЛ рдЕрдм detail рдореЗрдВ рд╕рдордЭрддреЗ рд╣реИрдВ рдХрд┐

## ЁЯФФ Firebase Cloud Messaging (FCM) рдХреНрдпрд╛ рд╣реИ?

---

### ЁЯУМ Simple Definition

**FCM (Firebase Cloud Messaging)** Google рдХреА рдПрдХ **free messaging service** рд╣реИ,
рдЬрд┐рд╕рд╕реЗ рдЖрдк **push notifications** рдФрд░ **data messages** рднреЗрдЬ рд╕рдХрддреЗ рд╣реЛ:

* **Android apps**
* **iOS apps**
* **Web apps (browsers)**

---

### тЪЩя╕П рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ FCM?

1. **App рдореЗрдВ FCM SDK integrate рдХрд░реЛ**

   * Android/iOS/Web app рдореЗрдВ Firebase SDK рдбрд╛рд▓рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИред
   * SDK device рдХреЛ рдПрдХ **unique token** рджреЗрддрд╛ рд╣реИ (рдЗрд╕рдХреЛ "registration token" рдХрд╣рддреЗ рд╣реИрдВ)ред

2. **Server рд╕реЗ Notification рднреЗрдЬрдирд╛**

   * рдЖрдкрдХреЗ backend (рдЬреИрд╕реЗ Spring Boot) рд╕реЗ рдЙрд╕ token рдХреЛ target рдХрд░рдХреЗ message рднреЗрдЬрддреЗ рд╣реЛред
   * Message Firebase server рддрдХ рдЬрд╛рддрд╛ рд╣реИред

3. **Firebase Cloud Messaging server тЖТ Device рддрдХ message рдкрд╣реБрдВрдЪрд╛рддрд╛ рд╣реИ**

   * Firebase middleman рдХреА рддрд░рд╣ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред
   * Delivery fast рдФрд░ reliable рд╣реЛрддреА рд╣реИред

---

### ЁЯУи FCM рд╕реЗ рдХреМрди-рдХреМрдирд╕реЗ Messages рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВ?

1. **Notification Message**

   * UI рдкрд░ рджрд┐рдЦрд╛рдИ рджреЗрдиреЗ рд╡рд╛рд▓реЗ simple push notificationред
   * Example: *"You have a new message!"*

2. **Data Message**

   * App рдХреЛ background рдореЗрдВ data рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдПред
   * Example: *Order status update, chat message, background sync data.*

3. **Combined Message**

   * Notification + Data рджреЛрдиреЛрдВ рдПрдХ рд╕рд╛рдеред

---

### ЁЯОп FCM рдХреЗ рдлрд╛рдпрджреЗ

* **Free service** (рдХреЛрдИ cost рдирд╣реАрдВ)ред
* Android, iOS рдФрд░ Web рд╕рднреА рдХреЛ support рдХрд░рддрд╛ рд╣реИред
* **Scalable** тЖТ рд▓рд╛рдЦреЛрдВ users рдХреЛ рднреА message deliver рдХрд░ рд╕рдХрддрд╛ рд╣реИред
* **Targeted delivery** тЖТ

  * рдХрд┐рд╕реА specific device рдХреЛ
  * рдХрд┐рд╕реА user group рдХреЛ
  * рдпрд╛ рдкреВрд░реЗ app audience рдХреЛ message рднреЗрдЬ рд╕рдХрддреЗ рд╣реЛред
* **Scheduling рдФрд░ Topic based messaging** рднреА possible рд╣реИред

---

ЁЯСЙ Short рдореЗрдВ:
**FCM рдПрдХ free рдФрд░ powerful service рд╣реИ рдЬрд┐рд╕рд╕реЗ рдЖрдк рдЕрдкрдиреЗ app users рдХреЛ instantly push notification рдФрд░ data рднреЗрдЬ рд╕рдХрддреЗ рд╣реЛ тАФ рдЪрд╛рд╣реЗ рд╡реЛ Android, iOS рдпрд╛ Web app use рдХрд░ рд░рд╣реЗ рд╣реЛрдВред**

---

рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЛрдЧреЗ рдореИрдВ рдЖрдкрдХреЛ **Spring Boot рд╕реЗ FCM рдХрд╛ actual flow (server рд╕реЗ device рддрдХ push notification рднреЗрдЬрдиреЗ рдХрд╛ example)** step-by-step diagram рдХреЗ рд╕рд╛рде рд╕рдордЭрд╛рдКрдБ?
==============================================================================================================================================
рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рд╕рд╡рд╛рд▓ Vishnudas ЁЯСМ
рддреБрдореНрд╣реЗрдВ рдпреЗ рдЬрд╛рдирдирд╛ рд╣реИ рдХрд┐ **FCM SDK рдЬреЛ unique ID (registration token / device token) рджреЗрддрд╛ рд╣реИ, рд╡реЛ рдХрд╣рд╛рдБ store рд╣реЛрддреА рд╣реИред**

---

## ЁЯУМ рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рд╕рдордЭ рд▓реЛ: Unique ID рдХреНрдпрд╛ рд╣реИ?

* рдЬрдм рдЖрдк Android / iOS / Web app рдореЗрдВ **Firebase SDK** рдбрд╛рд▓рддреЗ рд╣реЛ тЖТ SDK Firebase server рд╕реЗ рдПрдХ **Registration Token** generate рдХрд░рддрд╛ рд╣реИред
* рдпрд╣ token рдЙрд╕ device + рдЙрд╕ app install рдХреЗ рд▓рд┐рдП unique рд╣реЛрддрд╛ рд╣реИред
* Backend server рдЗрд╕реА token рдХреЛ use рдХрд░рдХреЗ рдЙрд╕ device рдкрд░ push notification рднреЗрдЬрддрд╛ рд╣реИред

---

## ЁЯУН рдпрд╣ Token рдХрд╣рд╛рдБ store рд╣реЛрддрд╛ рд╣реИ?

### 1. **App side (Client App рдореЗрдВ)**

* рдЬрдм Firebase SDK token рдмрдирд╛рддрд╛ рд╣реИ тЖТ рд╡реЛ app рдХреЛ callback рдореЗрдВ рджреЗрддрд╛ рд╣реИред
* Example: Android app рдореЗрдВ Java/Kotlin code:

  ```java
  FirebaseMessaging.getInstance().getToken()
      .addOnCompleteListener(task -> {
          if (!task.isSuccessful()) {
              Log.w("FCM", "Fetching FCM registration token failed", task.getException());
              return;
          }

          // рдпрд╣рд╛рдБ рдЖрдкрдХреЛ token рдорд┐рд▓реЗрдЧрд╛
          String token = task.getResult();
          Log.d("FCM", "FCM Token: " + token);

          // рдЖрдк рдЪрд╛рд╣реЛ рддреЛ рдЗрд╕реЗ local storage (SharedPreferences/DB) рдореЗрдВ рд░рдЦ рд╕рдХрддреЗ рд╣реЛ
      });
  ```
* рдорддрд▓рдм **default рддреМрд░ рдкрд░ Firebase рдЕрдкрдиреЗ server рдкрд░ рдЗрд╕реЗ рд░рдЦрддрд╛ рд╣реИ**,
  рд▓реЗрдХрд┐рди рдЖрдкрдХреЛ рдЗрд╕реЗ **рдЕрдкрдиреЗ backend database** рдореЗрдВ рднреА store рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдП (рддрд╛рдХрд┐ рдЖрдк рдмрд╛рдж рдореЗрдВ notifications рднреЗрдЬ рд╕рдХреЛ)ред

---

### 2. **Firebase server side (Google рдХреА рддрд░рдл рд╕реЗ)**

* Token Firebase рдХреЗ cloud server рдкрд░ рднреА save рд░рд╣рддрд╛ рд╣реИред
* рдЗрд╕рд▓рд┐рдП рдЬрдм рдЖрдк Spring Boot / Node.js рд╕реЗ `FirebaseMessaging.send()` call рдХрд░рддреЗ рд╣реЛ рдФрд░ token рдкрд╛рд╕ рдХрд░рддреЗ рд╣реЛ тЖТ Firebase server рдЙрд╕ token рд╕реЗ рд╕рд╣реА device рдвреВрдВрдв рд▓реЗрддрд╛ рд╣реИред

---

### 3. **Your Server (Backend Database)**

* Real-world apps рдореЗрдВ рдЬрдм client app token рд▓реЗрддрд╛ рд╣реИ, рддреЛ рд╡рд╣ **рдЖрдкрдХреЗ backend API рдХреЛ рднреЗрдЬ рджреЗрддрд╛ рд╣реИред**
* Backend (Spring Boot, Node.js, etc.) рдЗрд╕ token рдХреЛ **database** (рдЬреИрд╕реЗ MySQL, MongoDB) рдореЗрдВ save рдХрд░ рд▓реЗрддрд╛ рд╣реИ тЖТ userId рдпрд╛ deviceId рд╕реЗ map рдХрд░рдХреЗред
* Example flow:

  * User login рд╣реБрдЖ тЖТ FCM token backend рдХреЛ рднреЗрдЬрд╛ рдЧрдпрд╛ред
  * Backend рдиреЗ `users` table рдореЗрдВ userId рдХреЗ рд╕рд╛рде рдпрд╣ token store рдХрд░ рд▓рд┐рдпрд╛ред
  * рдЕрдм рдЬрдм рднреА рдЙрд╕ user рдХреЛ notification рднреЗрдЬрдирд╛ рд╣реИ, backend database рд╕реЗ рдЙрд╕рдХрд╛ token рдЙрдард╛рдХрд░ FCM рдХреЛ рднреЗрдЬ рджреЗрдЧрд╛ред

---

## тЬЕ Final Summary

* Token **Firebase SDK рд╕реЗ generate рд╣реЛрддрд╛ рд╣реИ**ред
* Token **Firebase server рдореЗрдВ рднреА store рд░рд╣рддрд╛ рд╣реИ** (delivery рдХреЗ рд▓рд┐рдП)ред
* рд▓реЗрдХрд┐рди practical apps рдореЗрдВ **рдЖрдкрдХрд╛ backend database рднреА рдЗрд╕реЗ store рдХрд░рддрд╛ рд╣реИ**, рддрд╛рдХрд┐ рдЖрдк рдмрд╛рдж рдореЗрдВ targeted notifications рднреЗрдЬ рдкрд╛рдУред

---

рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЛрдЧреЗ рдХрд┐ рдореИрдВ рдПрдХ **Spring Boot + Android рдХрд╛ рдЫреЛрдЯрд╛ рд╕рд╛ workflow** рдмрдирд╛ рджреВрдБ рдЬрд┐рд╕рдореЗрдВ рджрд┐рдЦрд╛рдКрдБ рдХрд┐ token generate рд╣реЛрдХрд░ backend рдореЗрдВ рдХреИрд╕реЗ store рд╣реЛрддрд╛ рд╣реИ рдФрд░ рдлрд┐рд░ backend рд╕реЗ notification рдХреИрд╕реЗ рднреЗрдЬрддреЗ рд╣реИрдВ?
