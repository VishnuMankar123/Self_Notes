рдЖрдкрдХреЗ рджреНрд╡рд╛рд░рд╛ рдкреВрдЫреЗ рдЧрдП рдЗрд╕ Spring Security config code рдХрд╛ **step-by-step working explanation (in Hindi)** рдиреАрдЪреЗ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ:

---

## ЁЯФР **Spring Security JDBC Authentication тАФ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ**

---

### ЁЯФз 1. **AuthenticationManagerBuilder + JDBC Configuration**

```java
@Autowired
public void authManager(AuthenticationManagerBuilder auth) throws Exception {
    auth.jdbcAuthentication()
        .dataSource(dataSource)
        .passwordEncoder(new BCryptPasswordEncoder())
        .usersByUsernameQuery("select username,password,enabled from users where username=?")
        .authoritiesByUsernameQuery("select username,authority from authorities where username=?");
}
```

### ЁЯСЙ рдпреЗ рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?

| Line                              | рдХрд╛рдо                                                                                 |
| --------------------------------- | ----------------------------------------------------------------------------------- |
| `auth.jdbcAuthentication()`       | JDBC рдмреЗрд╕реНрдб authentication рдХреЛ enable рдХрд░рддрд╛ рд╣реИред рдпрд╛рдиреА DB рд╕реЗ username/password рдЪреЗрдХ рд╣реЛрдВрдЧреЗ |
| `.dataSource(dataSource)`         | рдХрд┐рд╕ database рд╕реЗ data рд▓реЗрдирд╛ рд╣реИ рд╡реЛ рдмрддрд╛рддрд╛ рд╣реИ (рдЖрдкрдиреЗ MySQL set рдХрд┐рдпрд╛ рд╣реЛрдЧрд╛)                 |
| `.passwordEncoder(...)`           | DB рдореЗрдВ рдЬреЛ password encrypted рд╣реИ (BCrypt), рдЙрд╕реЗ decode рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП encoder            |
| `usersByUsernameQuery(...)`       | `users` рдЯреЗрдмрд▓ рд╕реЗ username/password/enable check рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП custom SQL               |
| `authoritiesByUsernameQuery(...)` | `authorities` рдЯреЗрдмрд▓ рд╕реЗ roles fetch рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП SQL                                   |

ЁЯФБ рдЬрдм рднреА рдХреЛрдИ login рдХрд░рддрд╛ рд╣реИ, Spring рдпрд╣реА рджреЛ queries рдЪрд▓рд╛рдХрд░ authentication рдФрд░ authorization validate рдХрд░рддрд╛ рд╣реИред

---

### ЁЯФТ 2. **Security Filter Chain Configuration**

```java
@Bean
public SecurityFilterChain securityConfig(HttpSecurity http) throws Exception {
    http.authorizeHttpRequests((req) -> req
        .antMatchers("/admin").hasRole(ADMIN)
        .antMatchers("/user").hasAnyRole(ADMIN, USER)
        .antMatchers("/").permitAll()
        .anyRequest().authenticated()
    ).formLogin(); // default login form
    return http.build();
}
```

### ЁЯСЙ рдпреЗ рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?

| Line                                                | рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ                                                   |
| --------------------------------------------------- | -------------------------------------------------------------- |
| `.antMatchers("/admin").hasRole("ADMIN")`           | `/admin` URL рдХреЛ рд╕рд┐рд░реНрдл `ROLE_ADMIN` рд╡рд╛рд▓реЗ рд▓реЛрдЧ access рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ |
| `.antMatchers("/user").hasAnyRole("ADMIN", "USER")` | `/user` рдХреЛ рджреЛрдиреЛрдВ roles access рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ                      |
| `.antMatchers("/")`                                 | Homepage (`/`) рд╕рдмрдХреЗ рд▓рд┐рдП рдЦреБрд▓рд╛ рд╣реИ                                |
| `.anyRequest().authenticated()`                     | рдмрд╛рдХрд╝реА рд╕рднреА endpoints login рдХреЗ рдмрд╛рдж рд╣реА access рд╣реЛрдВрдЧреЗ               |
| `.formLogin()`                                      | Default login form рджрд┐рдЦреЗрдЧрд╛ (Spring Security рдХрд╛ auto-generated)  |

---

### ЁЯСитАНЁЯТ╗ рдЬрдм рдХреЛрдИ `/user` рдпрд╛ `/admin` URL access рдХрд░рддрд╛ рд╣реИ:

1. Spring Security рджреЗрдЦреЗрдЧрд╛ рдХрд┐ user login рдХрд┐рдпрд╛ рд╣реИ рдпрд╛ рдирд╣реАрдВред
2. рдЕрдЧрд░ login рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИ, рддреЛ Spring рдХрд╛ default login form рджрд┐рдЦреЗрдЧрд╛ред
3. User username/password рдбрд╛рд▓реЗрдЧрд╛ тЖТ

   * Spring JDBC query рдЪрд▓рд╛рдХрд░ `users` рдФрд░ `authorities` рдЯреЗрдмрд▓ рд╕реЗ data fetch рдХрд░реЗрдЧрд╛ред
   * Password match рдХрд░реЗрдЧрд╛ тЖТ Success рдпрд╛ Failure рджреЗрдЧрд╛ред
4. Role check рдХрд░реЗрдЧрд╛ тЖТ

   * рдЕрдЧрд░ URL рдкрд░ role match рдирд╣реАрдВ рд╣реБрдЖ тЖТ **403 Access Denied**
   * рдЕрдЧрд░ role match рд╣реБрдЖ тЖТ **Access Granted**

---

### тЬЕ Example:

| Username | Password | Role       | Access                      |
| -------- | -------- | ---------- | --------------------------- |
| `admin`  | admin123 | ADMIN+USER | `/admin`, `/user`, `/`      |
| `user`   | user123  | USER       | `/user`, `/` (not `/admin`) |

---

рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ:

* Custom login page
* JWT token-based login
* Role hierarchy
* Logout settings

рднреА рдЗрд╕рдХреЗ рд╕рд╛рде configure рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

---

рдЕрдЧрд░ рдЕрднреА рднреА рдХреЛрдИ step unclear рд╣реИ рддреЛ рдореБрдЭреЗ рдмрддрд╛рдЗрдП, рдореИрдВ code рдХреЗ рд╕рд╛рде рдФрд░ deep explain рдХрд░ рджреВрдБред
==================================================================================
рдЕрдЧрд░ рд╣рдо **JDBC Authentication** рдХрд╛ рдЙрдкрдпреЛрдЧ **рдирд╣реАрдВ** рдХрд░рддреЗ рд╣реИрдВ рддреЛ Spring Security рдореЗрдВ Authentication рдХреЗ рд▓рд┐рдП рджреВрд╕рд░реЗ рд╡рд┐рдХрд▓реНрдк рд╣реЛрддреЗ рд╣реИрдВред рдпреЗ рд╡рд┐рдХрд▓реНрдк рдЗрд╕ рдмрд╛рдд рдкрд░ рдирд┐рд░реНрднрд░ рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рдЖрдк user credentials рдХрд╣рд╛рдБ рд╕реЗ verify рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ:

---

## тЬЕ JDBC Authentication рдирд╣реАрдВ рдХрд░рдиреЗ рдкрд░ рд╡рд┐рдХрд▓реНрдк:

---

### ЁЯФ╕ 1. **In-Memory Authentication**

ЁЯФ╣ User details memory рдореЗрдВ hardcoded рд░рд╣рддреЗ рд╣реИрдВред
ЁЯФ╣ Testing рдпрд╛ рдЫреЛрдЯреЗ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рд╡рд┐рдХрд▓реНрдкред

```java
@Bean
public UserDetailsService userDetailsService() {
    UserDetails admin = User.withDefaultPasswordEncoder()
        .username("admin")
        .password("admin123")
        .roles("ADMIN")
        .build();

    UserDetails user = User.withDefaultPasswordEncoder()
        .username("user")
        .password("user123")
        .roles("USER")
        .build();

    return new InMemoryUserDetailsManager(admin, user);
}
```

ЁЯза рдпрд╣рд╛рдБ рдХреЛрдИ database рдирд╣реАрдВ рд╣реЛрддрд╛ред

---

### ЁЯФ╕ 2. **LDAP Authentication**

ЁЯФ╣ рдпрджрд┐ рдЖрдкрдХреА organization рдореЗрдВ LDAP (Lightweight Directory Access Protocol) server рд╣реИ, рддреЛ Spring Security LDAP рд╕реЗ authenticate рдХрд░ рд╕рдХрддрд╛ рд╣реИред

```java
@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())
            .formLogin()
            .and()
            .ldapAuthentication()
            .userDnPatterns("uid={0},ou=people")
            .groupSearchBase("ou=groups")
            .contextSource()
            .url("ldap://localhost:8389/dc=springframework,dc=org");
        return http.build();
    }
}
```

---

### ЁЯФ╕ 3. **Custom UserDetailsService**

ЁЯФ╣ рдЬрдм рдЖрдк рдЕрдкрдиреЗ рддрд░реАрдХреЗ рд╕реЗ user authenticate рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ (рдЬреИрд╕реЗ external API, NoSQL DB, рдпрд╛ file), рддреЛ рдЖрдк `UserDetailsService` implement рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

```java
@Service
public class MyUserDetailsService implements UserDetailsService {

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // Custom logic: DB/API/File рд╕реЗ fetch рдХрд░реЗрдВ
        if (username.equals("admin")) {
            return User.withUsername("admin")
                .password(new BCryptPasswordEncoder().encode("admin123"))
                .roles("ADMIN")
                .build();
        } else {
            throw new UsernameNotFoundException("User not found");
        }
    }
}
```

ЁЯзй рдЗрд╕ approach рдореЗрдВ database рдЬрд░реВрд░реА рдирд╣реАрдВ рд╣реИ тАФ рдЖрдк рдХрд┐рд╕реА рднреА рд╕реНрд░реЛрдд рд╕реЗ user рдХреА рдЬрд╛рдирдХрд╛рд░реА fetch рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

---

### ЁЯФ╕ 4. **Token-Based Authentication (JWT)**

ЁЯФ╣ Modern microservices рдореЗрдВ JDBC рдХреА рдЬрдЧрд╣ JWT token authentication рдХрд╛ рдЪрд▓рди рд╣реИред
ЁЯФ╣ рдЗрд╕рдореЗрдВ Spring Security user рдХреЛ authenticate рдХрд░рддрд╛ рд╣реИ, рдлрд┐рд░ token issue рдХрд░рддрд╛ рд╣реИред

ЁЯФ╕ рдЖрдк JDBC рдХреЛ рд╕рд┐рд░реНрдл user detail storage рдХреЗ рд▓рд┐рдП use рдХрд░рддреЗ рд╣реИрдВ, authentication mechanism JWT рд╣реЛрддрд╛ рд╣реИред

---

## ЁЯФЪ рдирд┐рд╖реНрдХрд░реНрд╖:

| Approach                  | Database Required | Use Case              |
| ------------------------- | ----------------- | --------------------- |
| In-Memory Authentication  | тЭМ                 | Testing               |
| JDBC Authentication       | тЬЕ                 | Production with RDBMS |
| LDAP Authentication       | тЬЕ (LDAP Server)   | Enterprises           |
| Custom UserDetailsService | тЭМ / тЬЕ             | Full control          |
| JWT (Token Based)         | тЬЕ / тЭМ             | Modern REST APIs      |

---

рдЕрдЧрд░ рдЖрдк рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдк рдХрд┐рд╕ use-case рдХреЗ рд▓рд┐рдП security implement рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рддреЛ рдореИрдВ рдЖрдкрдХреЛ рд╕рд╣реА рддрд░реАрдХрд╛ recommend рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред
=========================================================================================