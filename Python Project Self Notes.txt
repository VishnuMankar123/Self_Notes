Bilkul 👍
tum ye pooch rahe ho ki ye **syntax** kaise use hota hai:

```python
df = df.merge(other_df, how='outer', indicator=True)
df = df[df['_merge'] == 'left_only'].drop(columns='_merge')
```

Main tumhe ek simple **demo** example se samjhata hoon:

---

### **Step 1: DataFrames banana**

```python
import pandas as pd

# Original data
df = pd.DataFrame({
    "order": [1001, 1002, 1003],
    "work_center": ["CNC-101", "CNC-105", "CNC-102"]
})

# Dedicated CNC data
dedicated_cnc_route = pd.DataFrame({
    "order": [1001, 1003],
    "work_center": ["CNC-101", "CNC-102"]
})

print("Original df:\n", df)
print("\nDedicated cnc:\n", dedicated_cnc_route)
```

---

### **Step 2: Merge with indicator**

```python
merged = df.merge(dedicated_cnc_route, how='outer', indicator=True)
print("\nMerged DataFrame:\n", merged)
```

**Output:**

```
   order work_center    _merge
0   1001    CNC-101      both
1   1002    CNC-105  left_only
2   1003    CNC-102      both
```

---

### **Step 3: Filter left\_only**

```python
filtered = merged[merged['_merge'] == 'left_only'].drop(columns='_merge')
print("\nFiltered DataFrame:\n", filtered)
```

**Output:**

```
   order work_center
1   1002    CNC-105
```

---

👉 Matlab: `1001` aur `1003` orders nikal gaye kyunki wo dedicated CNC list me the, sirf `1002` bacha.

---

💡 To use this syntax:

1. Tumhare paas ek **main DataFrame** (original data) aur ek **filter DataFrame** (dedicated list) hona chahiye.
2. `merge(..., indicator=True)` lagao.
3. `_merge == 'left_only'` select karo → matlab **sirf woh rows jo filter DataFrame me nahi thi**.

---

Kya tum chahte ho main isko aur simplify karke ek **general function** bana du jisme tum koi bhi DataFrame aur filter DataFrame pass karke unwanted rows hata sako?
===============================================================================================================

Bahut accha sawal hai 👌
chalo `merge()` ke **`how='outer'`** aur **`indicator=True`** ka matlab detail me samjhte hain:

---

## 🔹 `how='outer'`

* Pandas `merge()` me `how` decide karta hai ki **join** kaise hoga (SQL join jaisa).

Options:

* `inner` → Sirf woh rows jo **dono DataFrames me match karein**
* `left` → Left DataFrame ke saare rows, right se sirf matching
* `right` → Right DataFrame ke saare rows, left se sirf matching
* `outer` → **Dono DataFrames ke saare rows**, chahe match kare ya na kare

👉 Matlab **outer join** = union of both DataFrames.

---

## 🔹 `indicator=True`

* Agar tum `indicator=True` use karte ho, to ek **extra column `_merge`** add hota hai.
* Ye column batata hai har row ka source:

  * `"left_only"` → Row sirf **left DataFrame** (pehla wala) me tha
  * `"right_only"` → Row sirf **right DataFrame** (dusra wala) me tha
  * `"both"` → Row dono DataFrames me tha

---

## 🔹 Example

```python
import pandas as pd

df1 = pd.DataFrame({"id": [1, 2, 3], "val1": ["A", "B", "C"]})
df2 = pd.DataFrame({"id": [2, 3, 4], "val2": ["X", "Y", "Z"]})

merged = df1.merge(df2, on="id", how="outer", indicator=True)
print(merged)
```

**Output:**

```
   id val1 val2      _merge
0   1    A  NaN   left_only
1   2    B    X        both
2   3    C    Y        both
3   4  NaN    Z  right_only
```

---

✅ Matlab:

* Row `id=1` → sirf left me tha → `"left_only"`
* Row `id=2` aur `id=3` → dono me mile → `"both"`
* Row `id=4` → sirf right me tha → `"right_only"`

---

⚡ Isiliye tumhare code me `outer + indicator` use hua hai taaki easily identify karke **sirf left\_only rows rakh sako** aur dedicated CNC waale rows hata sako.

---

Kya tum chahte ho main tumhe ek **visual diagram** bana ke dikhau jo left/right/outer join + indicator ka difference show kare?
=============================================================================================================
Bahut accha sawal 👍
Chalo is line ko detail me samajhte hain:

---

### Code:

```python
ot_df[SCHEMA.OT.COM.DATE] = ot_df[SCHEMA.OT.COM.DATE].dt.date
```

---

### 🔹 Step by Step:

1. **`ot_df[...]`**

   * `ot_df` ek **Pandas DataFrame** hai jo shayad **Overtime (OT)** data rakhta hai.
   * `SCHEMA.OT.COM.DATE` ek column name hoga (maan lo `"ot_date"`).

   Matlab → hum column `"ot_date"` ke data ko modify kar rahe hain.

---

2. **`.dt` accessor**

   * Jab ek DataFrame column me `datetime64[ns]` type hota hai, to Pandas me `.dt` accessor use hota hai.
   * Ye datetime ke saare components (date, time, year, month, day, weekday etc.) nikalne deta hai.

   Example:

   ```python
   df["order_date"].dt.year
   df["order_date"].dt.month
   df["order_date"].dt.day
   ```

---

3. **`.dt.date`**

   * Ye sirf **date part** nikalta hai (time hata deta hai).
   * Result type hota hai **Python `datetime.date` object**.

   Example:

   ```python
   import pandas as pd
   df = pd.DataFrame({"order_date": pd.to_datetime(["2025-08-17 14:30:00", "2025-08-18 09:00:00"])})
   df["order_date_only"] = df["order_date"].dt.date
   print(df)
   ```

   Output:

   ```
         order_date order_date_only
   0 2025-08-17 14:30:00    2025-08-17
   1 2025-08-18 09:00:00    2025-08-18
   ```

---

### ✅ Matlab:

Ye line column `"DATE"` (jo pehle datetime tha) ko replace kar rahi hai uske **sirf date portion** se → time part remove ho jaata hai.

---

⚡ Tumhare case me:
Agar `ot_df["DATE"]` me value `"2025-08-17 08:45:00"` tha, to update ke baad ye `"2025-08-17"` ban jaayega.

---

Kya tum chahte ho main `.dt` accessor ke **sabhi useful attributes & methods** ka ek example table bana kar du?

=============================================================================================================
Perfect 👍
Tum chahte ho **har method ke sath output bhi dikhe** (jaisa real Python me run karne par hota). Main tumhe **sample DataFrame** bana kar sabhi commonly used Pandas methods + unka output dikhata hoon.

---

# 📘 Pandas DataFrame Cheat Sheet (Methods + Output)

```python
import pandas as pd

data = {
    "Name": ["Amit", "Neha", "Rahul", "Priya", "Amit"],
    "Age": [25, 30, 22, 28, 25],
    "City": ["Delhi", "Mumbai", "Delhi", "Chennai", "Delhi"],
    "Salary": [50000, 60000, 45000, 70000, 50000]
}
df = pd.DataFrame(data)
print(df)
```

📊 **DataFrame**

```
    Name  Age    City  Salary
0   Amit   25   Delhi   50000
1   Neha   30  Mumbai   60000
2  Rahul   22   Delhi   45000
3  Priya   28 Chennai   70000
4   Amit   25   Delhi   50000
```

---

## 🔹 1. Basic Info

```python
df.head(2)
```

```
   Name  Age   City  Salary
0  Amit   25  Delhi   50000
1  Neha   30 Mumbai   60000
```

```python
df.tail(2)
```

```
    Name  Age    City  Salary
3  Priya   28 Chennai   70000
4   Amit   25   Delhi   50000
```

```python
df.shape
```

```
(5, 4)   # 5 rows, 4 columns
```

```python
df.columns
```

```
Index(['Name', 'Age', 'City', 'Salary'], dtype='object')
```

```python
df.dtypes
```

```
Name      object
Age        int64
City      object
Salary     int64
dtype: object
```

---

## 🔹 2. Summary Statistics

```python
df.describe()
```

```
             Age        Salary
count   5.000000      5.000000
mean   26.000000  55000.000000
std     3.162278   9574.695350
min    22.000000  45000.000000
25%    25.000000  50000.000000
50%    25.000000  50000.000000
75%    28.000000  60000.000000
max    30.000000  70000.000000
```

```python
df["Salary"].sum()
```

```
275000
```

```python
df["Salary"].max()
```

```
70000
```

---

## 🔹 3. Column & Row Selection

```python
df["Name"]
```

```
0     Amit
1     Neha
2    Rahul
3    Priya
4     Amit
Name: Name, dtype: object
```

```python
df[["Name", "City"]]
```

```
    Name    City
0   Amit   Delhi
1   Neha  Mumbai
2  Rahul   Delhi
3  Priya Chennai
4   Amit   Delhi
```

```python
df.iloc[0]
```

```
Name      Amit
Age          25
City      Delhi
Salary    50000
Name: 0, dtype: object
```

```python
df.loc[df["Age"] > 25]
```

```
    Name  Age    City  Salary
1   Neha   30  Mumbai   60000
3  Priya   28 Chennai   70000
```

---

## 🔹 4. Filtering

```python
df[df["City"] == "Delhi"]
```

```
    Name  Age   City  Salary
0   Amit   25  Delhi   50000
2  Rahul   22  Delhi   45000
4   Amit   25  Delhi   50000
```

```python
df[(df["City"] == "Delhi") & (df["Age"] > 24)]
```

```
   Name  Age   City  Salary
0  Amit   25  Delhi   50000
4  Amit   25  Delhi   50000
```

---

## 🔹 5. Unique & Counts

```python
df["City"].unique()
```

```
array(['Delhi', 'Mumbai', 'Chennai'], dtype=object)
```

```python
df["City"].value_counts()
```

```
Delhi      3
Mumbai     1
Chennai    1
Name: City, dtype: int64
```

---

## 🔹 6. Sorting

```python
df.sort_values(by="Salary")
```

```
    Name  Age    City  Salary
2  Rahul   22   Delhi   45000
0   Amit   25   Delhi   50000
4   Amit   25   Delhi   50000
1   Neha   30  Mumbai   60000
3  Priya   28 Chennai   70000
```

```python
df.sort_values(by="Salary", ascending=False)
```

```
    Name  Age    City  Salary
3  Priya   28 Chennai   70000
1   Neha   30  Mumbai   60000
0   Amit   25   Delhi   50000
4   Amit   25   Delhi   50000
2  Rahul   22   Delhi   45000
```

---

## 🔹 7. Grouping & Aggregation

```python
df.groupby("City")["Salary"].mean()
```

```
City
Chennai    70000.000000
Delhi      48333.333333
Mumbai     60000.000000
Name: Salary, dtype: float64
```

```python
df.groupby("City").agg({"Salary": ["mean", "max"]})
```

```
           Salary           
             mean    max
City                     
Chennai  70000.000  70000
Delhi    48333.333  50000
Mumbai   60000.000  60000
```

---

## 🔹 8. Remove Duplicates

```python
df.drop_duplicates()
```

```
    Name  Age    City  Salary
0   Amit   25   Delhi   50000
1   Neha   30  Mumbai   60000
2  Rahul   22   Delhi   45000
3  Priya   28 Chennai   70000
```

---

## 🔹 9. Add / Modify Columns

```python
df["Bonus"] = df["Salary"] * 0.10
df
```

```
    Name  Age    City  Salary   Bonus
0   Amit   25   Delhi   50000  5000.0
1   Neha   30  Mumbai   60000  6000.0
2  Rahul   22   Delhi   45000  4500.0
3  Priya   28 Chennai   70000  7000.0
4   Amit   25   Delhi   50000  5000.0
```

---

## 🔹 10. Apply Function

```python
df["Double_Age"] = df["Age"].apply(lambda x: x * 2)
df
```

```
    Name  Age    City  Salary   Bonus  Double_Age
0   Amit   25   Delhi   50000  5000.0          50
1   Neha   30  Mumbai   60000  6000.0          60
2  Rahul   22   Delhi   45000  4500.0          44
3  Priya   28 Chennai   70000  7000.0          56
4   Amit   25   Delhi   50000  5000.0          50
```

---

✅ Ye list tumhe **95% Pandas kaam** ke liye enough hai.

---

👉 Kya main tumhare liye ek **Excel file** bana du jisme ye sare methods + unka output side-by-side likha ho? Taaki tum run kare bina ek glance me samajh sako.
===============================================================================================================================================================
Bahut badiya sawal 🙌 — Pandas DataFrame me **data set karne (insert/update karne)** ke bahut saare tareeqe hote hain. Tumhe ekdum clear picture deta hoon:

---

# 📌 **Ways to Set Data in a DataFrame**

## **1. Dictionary of lists / arrays**

Sabse common tarika:

```python
import pandas as pd

data = {
    "Name": ["Amit", "Ravi", "Neha"],
    "Age": [25, 30, 22],
    "City": ["Delhi", "Mumbai", "Kolkata"]
}
df = pd.DataFrame(data)
print(df)
```

---

## **2. List of dictionaries**

```python
data = [
    {"Name": "Amit", "Age": 25, "City": "Delhi"},
    {"Name": "Ravi", "Age": 30, "City": "Mumbai"},
    {"Name": "Neha", "Age": 22, "City": "Kolkata"}
]
df = pd.DataFrame(data)
```

---

## **3. List of lists (with column names)**

```python
data = [
    [101, "Ring", 10],
    [102, "Necklace", 5],
    [103, "Bracelet", 7]
]
df = pd.DataFrame(data, columns=["OrderID", "Product", "Quantity"])
```

---

## **4. Numpy arrays**

```python
import numpy as np
arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
df = pd.DataFrame(arr, columns=["A", "B", "C"])
```

---

## **5. From Series (multiple series combine karke)**

```python
s1 = pd.Series([25, 30, 22], name="Age")
s2 = pd.Series(["Delhi", "Mumbai", "Kolkata"], name="City")
df = pd.concat([s1, s2], axis=1)
```

---

## **6. Reading from external files**

* CSV:

  ```python
  df = pd.read_csv("data.csv")
  ```
* Excel:

  ```python
  df = pd.read_excel("data.xlsx")
  ```
* SQL Database:

  ```python
  df = pd.read_sql("SELECT * FROM table", connection)
  ```

---

## **7. Empty DataFrame + assign later**

```python
df = pd.DataFrame(columns=["Name", "Age", "City"])
df.loc[0] = ["Amit", 25, "Delhi"]
df.loc[1] = ["Ravi", 30, "Mumbai"]
```

---

## **8. Using `from_dict` with orientation**

```python
data = {"A": [1,2,3], "B": [4,5,6]}
df = pd.DataFrame.from_dict(data)

# row-wise dict
data = {0: {"A": 1, "B": 4}, 1: {"A": 2, "B": 5}}
df = pd.DataFrame.from_dict(data, orient="index")
```

---

✅ Matlab tum Pandas DataFrame ko:

* Dict of lists
* List of dicts
* List of lists
* Numpy arrays
* Series combine karke
* Files (CSV/Excel/SQL)
* Empty + assign

In sab tariko se bana/modify kar sakte ho.

---

👉 Kya tum chahte ho main tumhe ek **summary table (cheat-sheet)** bana ke du jisme har ek method ka ek mini example ek hi jagah ho, taaki revision easy ho?
======================================================================================================================
Bahut acha sawaal 👍

Python me **`[]` (square brackets)** ka use context ke hisaab se alag-alag cheezon ke liye hota hai.
Main tumhe ekdum clear examples ke sath samjhata hoon:

---

# 📌 **Meaning of `[]` in Python**

## **1. Empty list**

```python
mylist = []
print(mylist)   # []
print(type(mylist))  # <class 'list'>
```

➡️ Matlab ek khaali list banayi hai (no elements).

---

## **2. List with values**

```python
fruits = ["apple", "banana", "cherry"]
```

➡️ `[]` me values likh kar list banti hai.

---

## **3. Indexing (position access)**

```python
fruits = ["apple", "banana", "cherry"]
print(fruits[0])   # "apple"
print(fruits[1])   # "banana"
```

➡️ `[]` ka matlab hai "is position ka element do".
(Index 0 se start hota hai).

---

## **4. Slicing (range of values)**

```python
print(fruits[0:2])  # ["apple", "banana"]
```

➡️ `list[start:end]` matlab start se lekar end-1 tak ke elements.

---

## **5. Dictionary / DataFrame access (key ya column name se)**

```python
person = {"name": "Amit", "age": 25}
print(person["name"])   # "Amit"
```

➡️ Yahan `[]` ka matlab hai key se value access karna.

DataFrame ke case me:

```python
import pandas as pd
df = pd.DataFrame({"Name": ["Amit","Ravi"], "Age": [25,30]})
print(df["Name"])  # ek column milega
```

---

## **6. Condition filtering (DataFrame me mask apply karna)**

```python
print(df[df["Age"] > 25])
```

➡️ Yahan `[]` ke andar condition lagayi gayi hai, jo filter karke rows deta hai.

---

✔️ **Summary:**

* `[]` → list banane ke liye
* `[]` → list/dict me element access karne ke liye
* `[]` → DataFrame me column ya condition filter karne ke liye
* `[:]` → slice karne ke liye

---

👉 Tum jis context me puchh rahe ho (DataFrame filtering `df[...]`), usme `[]` matlab hai:
**"Ye mask/condition lagao aur sirf wahi rows select karo jo True hain".**

---

Kya tum chahte ho main ek chhoti si **drawing/flow diagram** banaun jo dikhaye `[]` ka har use-case visually (list, dict, DataFrame)?
================================================================================================
.dt.date

.dt accessor datetime ke parts nikalne ke liye use hota hai.

.date → sirf date part nikalta hai (time remove kar deta hai).

Example:

"2025-08-17 14:30:00" → "2025-08-17"
==============================================================================================

🔹 Code
from datetime import time

start_time = time(8, 0)

🔹 Explanation

time class Python ke datetime module ka part hai.

time(8, 0) ka matlab hai sirf time object banana bina date ke.

Yahaan:

8 → hour = 8 AM

0 → minutes = 00

So:

start_time = time(8, 0)
print(start_time)


Output:

08:00:00

🔹 Kab use hota hai?

Jab tumhe sirf time of day store karna hai (date ki zarurat nahi).

Example use cases:

Office ka start time (8:00 AM)

Factory ka shift time

School ka class timing

Simulation ya scheduling me "din ke kis waqt se kaam shuru karna hai"

🔹 Example
from datetime import datetime, time

start_time = time(8, 0)   # 8:00 AM
end_time   = time(17, 0)  # 5:00 PM

now = datetime.now().time()  # current time (only time part)

if start_time <= now <= end_time:
    print("Working hours")
else:
    print("Off hours")


👉 Agar abhi ka time 10:30 AM hai to output hoga:

Working hours
==============================================================================================

Achha sawal 👌

`.merge(..., how='outer')` me jo **`outer`** hai uska matlab hai **Outer Join**. Ye SQL ke **FULL OUTER JOIN** jaisa hi hota hai.

---

### 🔹 Matlab of `outer` join

* Dono DataFrames ke **saare rows** le aata hai.
* Agar left aur right dono me match milta hai → ek hi row me merge ho jaata hai.
* Agar sirf left me hai → wo row bhi aayegi.
* Agar sirf right me hai → wo row bhi aayegi.

---

### 🔹 Example

**DataFrame A (left):**

| id | name  |
| -- | ----- |
| 1  | Ram   |
| 2  | Shyam |
| 3  | Mohan |

**DataFrame B (right):**

| id | age |
| -- | --- |
| 2  | 25  |
| 3  | 30  |
| 4  | 28  |

---

```python
A.merge(B, how="outer", on="id", indicator=True)
```

**Output:**

| id | name  | age | \_merge     |
| -- | ----- | --- | ----------- |
| 1  | Ram   | NaN | left\_only  |
| 2  | Shyam | 25  | both        |
| 3  | Mohan | 30  | both        |
| 4  | NaN   | 28  | right\_only |

---

### 🔹 Summary of join types

* `inner` → Sirf matching rows (intersection)
* `left` → Left DataFrame ke saare rows + matching from right
* `right` → Right DataFrame ke saare rows + matching from left
* `outer` → Dono ke saare rows (full union)

---

✅ Matlab:
Tumhare code me `outer` isliye use kiya gaya hai taaki pata chale ki **kaunse rows sirf main DataFrame me hain (left\_only)** aur **kaunse sirf dedicated CNC list me the (right\_only)**. Fir `left_only` select karke CNC rows hata diye jaate hain.

---

👉 Kya tum chahte ho mai tumhe is **outer join ke baad CNC rows delete hone ka full step-by-step flow** bana kar dikhau?

==============================================================================================
Acha 👍 ab sirf `-1` ka matlab samjhate hain.

Python me **list indexing** hoti hai aur uska ek special feature hai:

### 1. Normal Indexing (0 se start hoti hai)

```python
numbers = [10, 20, 30, 40]
print(numbers[0])  # 10
print(numbers[1])  # 20
```

### 2. Negative Indexing

Agar aap negative number dete ho to python list ko **peeche se** count karta hai:

```python
numbers = [10, 20, 30, 40]

print(numbers[-1])  # 40 (last element)
print(numbers[-2])  # 30 (second last element)
print(numbers[-3])  # 20
```

---

### Ab aapke code me:

```python
new_wkct = processWorkcenters[workcenterIndex-1]
```

yaha `-1` ka reason hai **1-based index ko 0-based index me convert karna**.

* Python lists **0 se start hoti hai**
* Lekin `x.split('-')[-1]` se jo number aata hai (for example `"AOASQC-2"` → `2`) wo **human style 1-based numbering** hai.

Isliye:

* Agar user ne `"AOASQC-1"` likha hai → `workcenterIndex = 1` → python me `0` chahiye → `1-1 = 0`
* Agar user ne `"AOASQC-2"` likha hai → `workcenterIndex = 2` → python me `1` chahiye → `2-1 = 1`

---

### Example:

```python
processWorkcenters = ["AOASQC01", "AOASQC02"]

x = "AOASQC-2"
workcenterIndex = int(x.split('-')[-1])   # 2
new_wkct = processWorkcenters[workcenterIndex-1]  # processWorkcenters[1]

print(new_wkct)
```

**Output:**

```
AOASQC02
```

---

🔑 **Summary:**
`-1` ka use isliye kiya gaya hai taaki **user ka diya hua 1-based index ko Python ke 0-based index me shift kiya ja sake**.

---

Kya aap chahte ho mai ek chhota helper example likh du jo dikhaye `-1` lagane se aur bina lagane se kya farq padta hai?
===============================================================================================
Good question 👍

Line:

```python
result_ltm_com = result_ltm_com.explode(["Start","Finish","WorkStation", "HeadCenter"])
```

iska matlab:

* Tumhare `result_ltm_com` DataFrame me kuch columns (`Start`, `Finish`, `WorkStation`, `HeadCenter`) ke andar **list-like values** (jaise `[1,2,3]` ya `['A','B']`) stored hain.
* `explode()` un lists ko **row by row expand** kar deta hai.
* Agar multiple columns list type hain, to woh unhe **parallel** explode karega (same index ke elements pair hokar alag rows banate hain).

---

### Example 👇

```python
import pandas as pd

df = pd.DataFrame({
    "Start": [[1, 2], [3, 4]],
    "Finish": [[5, 6], [7, 8]],
    "WorkStation": [["A", "B"], ["C", "D"]],
    "HeadCenter": [["X", "Y"], ["Z", "W"]]
})

print("Before explode:\n", df)

df = df.explode(["Start", "Finish", "WorkStation", "HeadCenter"])

print("\nAfter explode:\n", df)
```

### Output:

**Before explode:**

| Start  | Finish | WorkStation | HeadCenter |
| ------ | ------ | ----------- | ---------- |
| \[1,2] | \[5,6] | \[A,B]      | \[X,Y]     |
| \[3,4] | \[7,8] | \[C,D]      | \[Z,W]     |

**After explode:**

| Start | Finish | WorkStation | HeadCenter |
| ----- | ------ | ----------- | ---------- |
| 1     | 5      | A           | X          |
| 2     | 6      | B           | Y          |
| 3     | 7      | C           | Z          |
| 4     | 8      | D           | W          |

---

✅ Matlab: Ye har list ke elements ko **alag rows** bana deta hai aur column values ko **parallel align** karta hai.

⚠️ Dhyan rahe: Agar kisi column ki list length mismatch hai, to error aa sakta hai.

---

Vishnudas, tumhare `WorkStation` aur `HeadCenter` me kya list type values stored hain? (jaise multiple machines/centers ek row me list ke form me?)

===============================================================================================
Line:

```python
last_rows = result_ltm_com.duplicated(subset=['Job', 'operation_id'], keep='last')
```

iska matlab:

* `result_ltm_com.duplicated(...)` ek **boolean Series** return karta hai (True/False per row).
* Ye check karta hai ki `['Job', 'operation_id']` columns ke hisaab se **duplicate rows** hain ya nahi.

### Parameters samajh lo:

* `subset=['Job', 'operation_id']`
  → Sirf in columns ke combination ko consider karega duplicates detect karne ke liye.

* `keep='last'`
  → Matlab: har duplicate group me **sirf last occurrence ko unique** maanega, baaki sab pehle wale ko `True` mark karega (duplicate).

---

### Example 👇

```python
import pandas as pd

df = pd.DataFrame({
    "Job": [101, 101, 102, 101, 103, 102],
    "operation_id": [1, 1, 2, 1, 3, 2],
    "value": [10, 20, 30, 40, 50, 60]
})

print(df)

last_rows = df.duplicated(subset=['Job', 'operation_id'], keep='last')

print("\nDuplicated mask:\n", last_rows)
print("\nFiltered duplicates:\n", df[last_rows])
```

### Output:

**Original DF:**

| Job | operation\_id | value |
| --- | ------------- | ----- |
| 101 | 1             | 10    |
| 101 | 1             | 20    |
| 102 | 2             | 30    |
| 101 | 1             | 40    |
| 103 | 3             | 50    |
| 102 | 2             | 60    |

**Duplicated mask (True = duplicate except last one):**

```
0     True
1     True
2     True
3    False
4    False
5    False
dtype: bool
```

**Filtered duplicates:**

| Job | operation\_id | value |
| --- | ------------- | ----- |
| 101 | 1             | 10    |
| 101 | 1             | 20    |
| 102 | 2             | 30    |

---

✅ Matlab: ye code `last_rows` me un sari rows ko `True` mark karega jo duplicate hain aur **last occurrence ko safe rakhega**.

---

Vishnudas, kya tumhara next step yehi hai ki `result_ltm_com = result_ltm_com[~last_rows]` karke sirf **last wali row per Job + operation\_id** rakhna hai?

===============================================================================================